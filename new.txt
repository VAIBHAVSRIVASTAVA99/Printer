import React, { useState, useEffect, useRef } from 'react';

const App = () => {
  // File state
  const [selectedFile, setSelectedFile] = useState({
    name: "No File Selected",
    preview: "/api/placeholder/400/320",
    isPdf: false,
    isOffice: false,
    fileType: null
  });
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [currentPreviewIndex, setCurrentPreviewIndex] = useState(0);
  
  // PDF specific state
  const [numPages, setNumPages] = useState(null);
  const [pageNumber, setPageNumber] = useState(1);
  const [pdfError, setPdfError] = useState(false);
  const [pdfThumbnails, setPdfThumbnails] = useState({});
  
  // Print settings state
  const [copies, setCopies] = useState(1);
  const [pageSelection, setPageSelection] = useState("all");
  const [colorMode, setColorMode] = useState("bw");
  const [paperSize, setPaperSize] = useState("letter");
  const [paperType, setPaperType] = useState("glossy");
  const [margins, setMargins] = useState("normal");
  const [orientation, setOrientation] = useState("portrait");
  
  // New print settings
  const [borderSize, setBorderSize] = useState("none");
  const [duplexPrinting, setDuplexPrinting] = useState("single");
  const [printQuality, setPrintQuality] = useState("normal");
  
  const canvasRef = useRef(null);
  const pdfDocRef = useRef(null);

  useEffect(() => {
    // Load PDF.js script dynamically
    const script = document.createElement('script');
    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js';
    script.async = true;
    script.onload = () => {
      // PDF.js is now loaded, configure worker
      window.pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
      
      // If there's a PDF selected, render it
      if (selectedFile.isPdf && selectedFile.file) {
        renderPdf(selectedFile.file);
      }
      
      // Generate thumbnails for any existing PDF files
      selectedFiles.forEach((file, index) => {
        if (file.isPdf && file.file && !pdfThumbnails[index]) {
          generatePdfThumbnail(file.file, index);
        }
      });
    };
    document.body.appendChild(script);

    return () => {
      document.body.removeChild(script);
    };
  }, []);

  // Re-render PDF when selected file changes, page number changes, or settings change
  useEffect(() => {
    if (selectedFile.isPdf && selectedFile.file && window.pdfjsLib) {
      renderPdf(selectedFile.file);
    }
  }, [selectedFile, pageNumber, orientation, colorMode, paperSize, margins, borderSize]);

  const renderPdf = async (file) => {
    try {
      const fileReader = new FileReader();
      
      fileReader.onload = async function() {
        try {
          // Load the PDF document
          const typedArray = new Uint8Array(this.result);
          const loadingTask = window.pdfjsLib.getDocument(typedArray);
          
          const pdfDoc = await loadingTask.promise;
          pdfDocRef.current = pdfDoc;
          setNumPages(pdfDoc.numPages);
          
          // Handle page selection logic
          let pageToRender = pageNumber;
          if (pageSelection === "even" && pageNumber % 2 !== 0) {
            // Find nearest even page
            pageToRender = pageNumber + 1 <= numPages ? pageNumber + 1 : (pageNumber > 1 ? pageNumber - 1 : 1);
          } else if (pageSelection === "odd" && pageNumber % 2 === 0) {
            // Find nearest odd page
            pageToRender = pageNumber - 1 >= 1 ? pageNumber - 1 : (pageNumber < numPages ? pageNumber + 1 : numPages);
          }
          
          // Render the page
          const page = await pdfDoc.getPage(pageToRender);
          let viewport = page.getViewport({ scale: 1.0 });
          
          // Apply orientation
          const needsRotation = (orientation === "landscape" && viewport.width < viewport.height) || 
                               (orientation === "portrait" && viewport.width > viewport.height);
          
          // Adjust viewport for orientation if needed
          if (needsRotation) {
            viewport = page.getViewport({ scale: 1.0, rotation: viewport.rotation + 90 });
          }
          
          // Prepare canvas for rendering
          const canvas = canvasRef.current;
          if (!canvas) return;
          
          const context = canvas.getContext('2d');
          
          // Scale to fit within preview area while maintaining aspect ratio
          const maxWidth = 600;
          const maxHeight = 500;
          
          // Calculate scales for both width and height constraints
          const scaleWidth = maxWidth / viewport.width;
          const scaleHeight = maxHeight / viewport.height;
          
          // Use the smaller scale to ensure both dimensions fit
          const scale = Math.min(scaleWidth, scaleHeight);
          
          // Apply margins to scale
          let marginScale = scale;
          if (margins === "narrow") {
            marginScale = scale * 1.05; // Wider content, smaller margins
          } else if (margins === "wide") {
            marginScale = scale * 0.9; // Narrower content, larger margins
          }
          
          const scaledViewport = page.getViewport({ scale: marginScale, rotation: viewport.rotation });
          
          canvas.height = scaledViewport.height;
          canvas.width = scaledViewport.width;
          
          // Clear the canvas
          context.fillStyle = 'white';
          context.fillRect(0, 0, canvas.width, canvas.height);
          
          // Render PDF page to canvas
          const renderContext = {
            canvasContext: context,
            viewport: scaledViewport
          };
          
          await page.render(renderContext).promise;
          
          // Apply border if selected
          if (borderSize !== "none") {
            let borderWidth = 1; // Default thin border
            if (borderSize === "medium") borderWidth = 3;
            if (borderSize === "thick") borderWidth = 5;
            
            context.strokeStyle = 'black';
            context.lineWidth = borderWidth;
            context.strokeRect(borderWidth/2, borderWidth/2, canvas.width - borderWidth, canvas.height - borderWidth);
          }
          
          // Apply color mode filter
          if (colorMode === "bw" && selectedFile.isPdf) {
            const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;
            for (let i = 0; i < data.length; i += 4) {
              const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;
              data[i] = avg;     // R
              data[i + 1] = avg; // G
              data[i + 2] = avg; // B
            }
            context.putImageData(imageData, 0, 0);
          }
          
          // Apply print quality effects (simplified simulation)
          if (printQuality === "draft" && selectedFile.isPdf) {
            // Simulate lower quality with a slight blur
            const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
            const tempCanvas = document.createElement('canvas');
            tempCanvas.width = canvas.width;
            tempCanvas.height = canvas.height;
            const tempContext = tempCanvas.getContext('2d');
            tempContext.putImageData(imageData, 0, 0);
            
            // Clear original and redraw with lower quality
            context.fillStyle = 'white';
            context.fillRect(0, 0, canvas.width, canvas.height);
            context.globalAlpha = 0.9; // Slight transparency to simulate lower quality
            context.drawImage(tempCanvas, 0, 0);
            context.globalAlpha = 1.0;
          }
          
          setPdfError(false);
        } catch (error) {
          console.error('Error rendering PDF:', error);
          setPdfError(true);
        }
      };
      
      fileReader.readAsArrayBuffer(file);
    } catch (error) {
      console.error('Error loading PDF:', error);
      setPdfError(true);
    }
  };

  const generatePdfThumbnail = async (file, fileIndex) => {
    if (!window.pdfjsLib) return;
    
    try {
      const fileReader = new FileReader();
      
      fileReader.onload = async function() {
        try {
          // Load the PDF document
          const typedArray = new Uint8Array(this.result);
          const loadingTask = window.pdfjsLib.getDocument(typedArray);
          
          const pdfDoc = await loadingTask.promise;
          
          // Always render the first page as thumbnail
          const page = await pdfDoc.getPage(1);
          const viewport = page.getViewport({ scale: 1.0 });
          
          // Create a new canvas for the thumbnail
          const canvas = document.createElement('canvas');
          const context = canvas.getContext('2d');
          
          // Scale down for thumbnail
          const scale = 100 / viewport.width; // Thumbnail width of 100px
          const scaledViewport = page.getViewport({ scale });
          
          canvas.height = scaledViewport.height;
          canvas.width = scaledViewport.width;
          
          // Render PDF page to canvas
          const renderContext = {
            canvasContext: context,
            viewport: scaledViewport
          };
          
          await page.render(renderContext).promise;
          
          // Convert canvas to data URL
          const thumbnailUrl = canvas.toDataURL('image/png');
          
          // Update thumbnails state
          setPdfThumbnails(prev => ({
            ...prev,
            [fileIndex]: thumbnailUrl
          }));
        } catch (error) {
          console.error('Error generating PDF thumbnail:', error);
        }
      };
      
      fileReader.readAsArrayBuffer(file);
    } catch (error) {
      console.error('Error generating PDF thumbnail:', error);
    }
  };

  const handleCopiesChange = (e) => {
    setCopies(parseInt(e.target.value) || 1);
  };

  const increaseCopies = () => {
    setCopies((prev) => prev + 1);
  };

  // Function to check file type
  const getFileType = (fileName) => {
    const lowerName = fileName.toLowerCase();
    if (lowerName.endsWith('.pdf')) {
      return { isPdf: true, isOffice: false, fileType: 'pdf' };
    } else if (lowerName.endsWith('.xlsx') || lowerName.endsWith('.xls')) {
      return { isPdf: false, isOffice: true, fileType: 'excel' };
    } else if (lowerName.endsWith('.docx') || lowerName.endsWith('.doc')) {
      return { isPdf: false, isOffice: true, fileType: 'word' };
    } else if (lowerName.endsWith('.pptx') || lowerName.endsWith('.ppt')) {
      return { isPdf: false, isOffice: true, fileType: 'powerpoint' };
    } else {
      return { isPdf: false, isOffice: false, fileType: 'image' };
    }
  };

  const handleFileChange = (event) => {
    const files = event.target.files;
    if (files && files.length > 0) {
      const newFiles = Array.from(files).map(file => {
        const { isPdf, isOffice, fileType } = getFileType(file.name);
        return {
          name: file.name,
          // For PDFs and Office files, we need to store the actual file object
          preview: isPdf || isOffice ? null : URL.createObjectURL(file),
          isPdf,
          isOffice,
          fileType,
          file: file
        };
      });
      
      const updatedFiles = [...selectedFiles, ...newFiles];
      setSelectedFiles(updatedFiles);
      
      // Generate thumbnails for new PDF files
      if (window.pdfjsLib) {
        newFiles.forEach((file, i) => {
          const index = selectedFiles.length + i;
          if (file.isPdf) {
            generatePdfThumbnail(file.file, index);
          }
        });
      }
      
      // Set the newly added file as the current preview
      setCurrentPreviewIndex(updatedFiles.length - 1);
      setSelectedFile(updatedFiles[updatedFiles.length - 1]);
      setPageNumber(1); // Reset to first page when changing files
      setPdfError(false); // Reset error state
    }
  };

  const removeFile = (index) => {
    setSelectedFiles((prevFiles) => {
      const updatedFiles = prevFiles.filter((_, i) => i !== index);
      
      // Update current preview if needed
      if (index === currentPreviewIndex) {
        // If we're removing the current preview, switch to the first available file
        // or use the default if there are no files left
        if (updatedFiles.length > 0) {
          setCurrentPreviewIndex(0);
          setSelectedFile(updatedFiles[0]);
          setPageNumber(1); // Reset page number
        } else {
          setCurrentPreviewIndex(-1);
          setSelectedFile({
            name: "No file Selected",
            preview: "/api/placeholder/400/320",
            isPdf: false,
            isOffice: false,
            fileType: null
          });
        }
      } else if (index < currentPreviewIndex) {
        // If we're removing a file before the current preview, adjust the index
        setCurrentPreviewIndex(currentPreviewIndex - 1);
      }
      
      // Update thumbnails state by removing the deleted file and reindexing
      setPdfThumbnails(prev => {
        const newThumbnails = {};
        Object.entries(prev).forEach(([key, value]) => {
          const keyNum = parseInt(key);
          if (keyNum !== index) {
            // Shift indexes for items after the deleted one
            const newKey = keyNum > index ? keyNum - 1 : keyNum;
            newThumbnails[newKey] = value;
          }
        });
        return newThumbnails;
      });
      
      return updatedFiles;
    });
  };

  const selectFileForPreview = (index) => {
    setCurrentPreviewIndex(index);
    setSelectedFile(selectedFiles[index]);
    setPageNumber(1); // Reset to first page when changing files
    setPdfError(false); // Reset error state
  };

  // PDF navigation functions
  const goToPrevPage = () => {
    if (pageNumber > 1) {
      setPageNumber(pageNumber - 1);
    }
  };

  const goToNextPage = () => {
    if (pageNumber < numPages) {
      setPageNumber(pageNumber + 1);
    }
  };

  // Apply image filters for non-PDF files
  const getFilterStyle = () => {
    let filters = [];
    
    if (colorMode === "bw" && !selectedFile.isPdf) {
      filters.push("grayscale(100%)");
    }
    
    // Add quality-related filters for non-PDFs
    if (printQuality === "draft" && !selectedFile.isPdf) {
      filters.push("contrast(90%)");
      filters.push("brightness(105%)");
    } else if (printQuality === "high" && !selectedFile.isPdf) {
      filters.push("contrast(110%)");
      filters.push("saturate(105%)");
    }
    
    return filters.length > 0 ? { filter: filters.join(' ') } : {};
  };

  // Apply rotation based on orientation
  const getRotationStyle = () => {
    if (!selectedFile.isPdf) {
      // For images, we can directly rotate
      const isLandscape = orientation === "landscape";
      const img = new Image();
      
      if (selectedFile.preview) {
        img.src = selectedFile.preview;
        // Check if image orientation needs changing
        const needsRotation = (isLandscape && img.width < img.height) || 
                             (!isLandscape && img.width > img.height);
        
        if (needsRotation) {
          return { transform: 'rotate(90deg)' };
        }
      }
    }
    
    return {};
  };

  // Apply paper size styles
  const getPaperSizeStyle = () => {
    if (!selectedFile.isPdf) {
      switch (paperSize) {
        case "letter":
          return { maxWidth: '215.9mm', maxHeight: '279.4mm' };
        case "a3":
          return { maxWidth: '297mm', maxHeight: '420mm' };
        case "a4":
          return { maxWidth: '210mm', maxHeight: '297mm' };
        default:
          return {};
      }
    }
    return {};
  };

  // Get margin styles
  const getMarginStyle = () => {
    if (!selectedFile.isPdf) {
      switch (margins) {
        case "narrow":
          return { padding: '10px' };
        case "normal":
          return { padding: '25px' };
        case "wide":
          return { padding: '40px' };
        default:
          return {};
      }
    }
    return {};
  };

  // Get border styles for non-PDF files
  const getBorderStyle = () => {
    if (!selectedFile.isPdf && borderSize !== "none") {
      switch (borderSize) {
        case "thin":
          return { border: '1px solid black' };
        case "medium":
          return { border: '3px solid black' };
        case "thick":
          return { border: '5px solid black' };
        default:
          return {};
      }
    }
    return {};
  };
  
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const menuRef = useRef(null);

  // Close menu when clicking outside
  useEffect(() => {
    function handleClickOutside(event) {
      if (menuRef.current && !menuRef.current.contains(event.target)) {
        setIsMenuOpen(false);
      }
    }

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Get office file icon
  const getOfficeFileIcon = (fileType) => {
    switch (fileType) {
      case 'excel':
        return (
          <svg className="w-8 h-8 mx-auto text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
        );
      case 'word':
        return (
          <svg className="w-8 h-8 mx-auto text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
        );
      case 'powerpoint':
        return (
          <svg className="w-8 h-8 mx-auto text-orange-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
          </svg>
        );
      default:
        return (
          <svg className="w-8 h-8 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
        );
    }
  };


  return (
    <div className="flex flex-col min-h-screen bg-white">
      {/* Header */}
      <header className="flex justify-between items-center p-4 bg-white border-b border-gray-200 shadow-sm">
  <div className="flex items-center">
    <img src="/api/placeholder/40/28" alt="MyPrintCorner Logo" className="w-10 h-7" />
    <span className="ml-1 font-medium text-black text-lg">myprintcorner.com</span>
  </div>
  <div className="flex items-center">
    <a href="#" className="text-blue-600 font-medium mr-4">Sign In</a>
    <div className="relative">
  <button className="p-1 focus:outline-none" onClick={() => document.getElementById('menuDropdown').classList.toggle('hidden')}>
    <svg className="w-6 h-6" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M4 6h16M4 12h16M4 18h16" stroke="currentColor" strokeWidth="2" strokeLinecap="round" />
    </svg>
  </button>
  
  <div id="menuDropdown" className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg border border-gray-200 hidden z-10">
    <ul className="py-1">
      <li>
        <a href="#how-it-works" className="block px-4 py-2 text-gray-800 hover:bg-gray-100">
          How it works?
        </a>
      </li>
      <li>
        <a href="#account" className="block px-4 py-2 text-gray-800 hover:bg-gray-100">
          Account
        </a>
      </li>
      <li>
        <a href="#feedback" className="block px-4 py-2 text-gray-800 hover:bg-gray-100">
          Feedback
        </a>
      </li>
      <li>
        <a href="#contact-us" className="block px-4 py-2 text-gray-800 hover:bg-gray-100">
          Contact Us
        </a>
      </li>
    </ul>
  </div>
</div>
  </div>
</header>

       <main className="flex flex-col md:flex-row flex-1 p-4 gap-8">
        {/* Stepper */}
        <div className="w-full mb-8">
          <div className="flex items-center justify-between">
            <div className="flex flex-col items-center">
              <div className="w-6 h-6 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm">1</div>
              <span className="mt-2 text-sm">Upload File</span>
            </div>
            <div className="flex-1 h-1 mx-2 bg-blue-200"></div>
            <div className="flex flex-col items-center">
              <div className="w-6 h-6 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm">2</div>
              <span className="mt-2 text-sm">Print Settings</span>
            </div>
            <div className="flex-1 h-1 mx-2 bg-blue-200"></div>
            <div className="flex flex-col items-center">
              <div className="w-6 h-6 bg-gray-200 rounded-full flex items-center justify-center text-white text-sm">3</div>
              <span className="mt-2 text-sm">Select Location</span>
            </div>
            <div className="flex-1 h-1 mx-2 bg-blue-200"></div>
            <div className="flex flex-col items-center">
              <div className="w-6 h-6 bg-gray-200 rounded-full flex items-center justify-center text-white text-sm">4</div>
              <span className="mt-2 text-sm">Order Summary</span>
            </div>
          </div>
        </div>
      </main> 

      <div className="flex flex-col md:flex-row p-4 gap-8">
        {/* Left Section - File Preview - Increased width */}
        <div className="w-full md:w-3/5 lg:w-2/3">
          <div className="border rounded-lg p-4 bg-white">
            <h2 className="font-medium mb-4">Selected File</h2>
            
            {/* Preview - Made larger to use full width */}
            <div className="border rounded-md p-4 mb-6 flex flex-col items-center justify-center min-h-96 w-full">
              {selectedFile.isPdf ? (
                <div className="w-full flex flex-col items-center">
                  {pdfError ? (
                    <div className="text-center text-red-600 p-4">
                      <p>Error loading PDF. Please check if the file is valid.</p>
                    </div>
                  ) : (
                    <div className="pdf-container w-full flex justify-center">
                      <canvas ref={canvasRef} className="pdf-canvas border max-w-full"></canvas>
                    </div>
                  )}
                  
                  {/* PDF Navigation Controls */}
                  {numPages > 1 && !pdfError && (
                    <div className="mt-4 flex items-center space-x-4">
                      <button 
                        onClick={goToPrevPage} 
                        disabled={pageNumber <= 1}
                        className={`px-3 py-1 rounded ${pageNumber <= 1 ? 'bg-gray-200 text-gray-500' : 'bg-blue-600 text-white'}`}
                      >
                        Previous
                      </button>
                      <p className="text-sm">
                        Page {pageNumber} of {numPages}
                      </p>
                      <button 
                        onClick={goToNextPage} 
                        disabled={pageNumber >= numPages}
                        className={`px-3 py-1 rounded ${pageNumber >= numPages ? 'bg-gray-200 text-gray-500' : 'bg-blue-600 text-white'}`}
                      >
                        Next
                      </button>
                    </div>
                  )}
                </div>
              ) : (
                <div 
                  style={{
                    ...getPaperSizeStyle(),
                    ...getMarginStyle(),
                    border: '1px solid #e5e7eb',
                    backgroundColor: paperType === 'glossy' ? '#f8f9fa' : '#f3f4f6',
                    display: 'flex',
                    justifyContent: 'center',
                    alignItems: 'center'
                  }}
                >
                  <img 
                    src={selectedFile.preview} 
                    alt="Print preview" 
                    className="max-w-full max-h-96 object-contain"
                    style={{
                      ...getFilterStyle(),
                      ...getRotationStyle(),
                      ...getBorderStyle()
                    }}
                  />
                </div>
              )}
            </div>
            
            <div className="text-center">
              <p className="text-gray-700 text-sm">File: {selectedFile.name}</p>
              {selectedFile.isPdf && numPages && !pdfError && (
                <p className="text-gray-500 text-xs mt-1">Total Pages: {numPages}</p>
              )}
              <div className="text-sm mt-2 text-blue-600 flex justify-center space-x-4 flex-wrap">
                <span>Copies: {copies}</span>
                <span>Paper: {paperSize.toUpperCase()}</span>
                <span>{colorMode === 'bw' ? 'Black & White' : 'Color'}</span>
                <span>{orientation.charAt(0).toUpperCase() + orientation.slice(1)}</span>
                {borderSize !== "none" && <span>Border: {borderSize}</span>}
                {duplexPrinting !== "single" && <span>Duplex: {duplexPrinting}</span>}
              </div>
            </div>
          </div>
        </div>
        
        {/* Right Section - Print Settings - Decreased width */}
        <div className="w-full md:w-2/5 lg:w-1/3">
          <div className="border rounded-lg p-4 bg-white">
            <h2 className="font-medium mb-4">Print Settings</h2>
            
            {/* Settings */}
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <span>Pages</span>
                <select 
                  className="border rounded-md px-3 py-1"
                  value={pageSelection}
                  onChange={(e) => setPageSelection(e.target.value)}
                >
                  <option value="all">All</option>
                  <option value="even">Even</option>
                  <option value="odd">Odd</option>
                </select>
              </div>
              
              <div className="flex justify-between items-center">
                <span>Colour</span>
                <select 
                  className="border rounded-md px-3 py-1"
                  value={colorMode}
                  onChange={(e) => setColorMode(e.target.value)}
                >
                  <option value="bw">B&W</option>
                  <option value="color">Colour</option>
                </select>
              </div>
              
              <div className="flex justify-between items-center">
                <span>Number of Copies</span>
                <div className="flex items-center">
                  <input
                    type="text"
                    value={copies}
                    onChange={handleCopiesChange}
                    className="border rounded-md w-12 text-center py-1"
                  />
                  <button 
                    onClick={increaseCopies}
                    className="ml-2 bg-blue-600 text-white w-6 h-6 rounded flex items-center justify-center"
                  >
                    +
                  </button>
                </div>
              </div>
              
              <div className="flex justify-between items-center">
                <span>Paper Size</span>
                <select 
                  className="border rounded-md px-3 py-1"
                  value={paperSize}
                  onChange={(e) => setPaperSize(e.target.value)}
                >
                  <option value="letter">Letter</option>
                  <option value="a3">A3</option>
                  <option value="a4">A4</option>
                </select>
              </div>
              
              <div className="flex justify-between items-center">
                <span>Paper Type</span>
                <select 
                  className="border rounded-md px-3 py-1"
                  value={paperType}
                  onChange={(e) => setPaperType(e.target.value)}
                >
                  <option value="glossy">Glossy</option>
                  <option value="matte">Matte</option>
                </select>
              </div>

              <div className="flex justify-between items-center">
                <span>Margins</span>
                <select 
                  className="border rounded-md px-3 py-1"
                  value={margins}
                  onChange={(e) => setMargins(e.target.value)}
                >
                  <option value="normal">Normal</option>
                  <option value="narrow">Narrow</option>
                  <option value="wide">Wide</option>
                </select>
              </div>

              <div className="flex justify-between items-center">
                <span>Orientation</span>
                <select 
                  className="border rounded-md px-3 py-1"
                  value={orientation}
                  onChange={(e) => setOrientation(e.target.value)}
                >
                  <option value="portrait">Portrait</option>
                  <option value="landscape">Landscape</option>
                </select>
              </div>
              
              {/* New settings */}
              <div className="flex justify-between items-center">
                <span>Border Size</span>
                <select 
                  className="border rounded-md px-3 py-1"
                  value={borderSize}
                  onChange={(e) => setBorderSize(e.target.value)}
                >
                  <option value="none">None</option>
                  <option value="thin">Thin</option>
                  <option value="medium">Medium</option>
                  <option value="thick">Thick</option>
                </select>
              </div>
              
              <div className="flex justify-between items-center">
                <span>Duplex Printing</span>
                <select 
                  className="border rounded-md px-3 py-1"
                  value={duplexPrinting}
                  onChange={(e) => setDuplexPrinting(e.target.value)}
                >
                  <option value="single">Single-sided</option>
                  <option value="long">Double-sided (long edge)</option>
                  <option value="short">Double-sided (short edge)</option>
                </select>
              </div>
              
              <div className="flex justify-between items-center">
                <span>Print Quality</span>
                <select 
                  className="border rounded-md px-3 py-1"
                  value={printQuality}
                  onChange={(e) => setPrintQuality(e.target.value)}
                >
                  <option value="draft">Draft</option>
                  <option value="normal">Normal</option>
                  <option value="high">High Quality</option>
                </select>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Add More Files Section */}
      <div className="p-4">
        <div className="border rounded-lg p-6 bg-white">
          <h2 className="font-medium mb-4">Your Files</h2>
          <div className="flex items-center justify-center gap-4">
            {selectedFiles.length > 0 && (
              <button className="p-2 bg-gray-200 rounded-full">
                <svg className="w-5 h-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </button>
            )}
            <div className="flex-1 flex gap-4 overflow-x-auto py-2">
              {selectedFiles.map((file, index) => (
                <div 
                  key={index} 
                  className={`relative border-2 rounded-md p-1 cursor-pointer ${index === currentPreviewIndex ? 'border-blue-500' : 'border-gray-300'}`}
                  onClick={() => selectFileForPreview(index)}
                >
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      removeFile(index);
                    }}
                    className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center"
                  >
                    ✕
                  </button>
                  {file.isPdf ? (
                    pdfThumbnails[index] ? (
                      <img 
                        src={pdfThumbnails[index]} 
                        alt={`PDF: ${file.name}`} 
                        className="w-28 h-40 object-contain bg-gray-50"
                      />
                    ) : (
                      <div className="w-28 h-40 bg-gray-100 flex items-center justify-center">
                        <div className="text-center">
                          <svg className="w-8 h-8 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                          </svg>
                          <span className="text-sm font-medium mt-1 block">PDF</span>
                        </div>
                      </div>
                    )
                  ) : (
                    <img src={file.preview} alt={file.name} className="w-28 h-40 object-cover" />
                  )}
                  {index === currentPreviewIndex && (
                    <div className="absolute bottom-1 left-1/2 transform -translate-x-1/2 bg-blue-500 text-white text-xs px-2 py-1 rounded-full">
                      Selected
                    </div>
                  )}
                </div>
              ))}
              <label className="border-2 border-dashed border-gray-300 rounded-md flex-1 min-w-48 flex flex-col items-center justify-center relative cursor-pointer">
                <input
                  type="file"
                  onChange={handleFileChange}
                  className="absolute opacity-0 w-full h-full cursor-pointer"
                  multiple
                  accept=".pdf,.jpg,.jpeg,.png"
                />
                <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center text-blue-600 mb-2">
                  <svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                </div>
                <span className="text-blue-600">Add More Files</span>
              </label>
            </div>
            {selectedFiles.length > 0 && (
              <button className="p-2 bg-gray-200 rounded-full">
                <svg className="w-5 h-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Bottom Button */}
      <div className="p-4 flex justify-center mb-8">
        <button className="bg-black text-white px-6 py-3 rounded-full flex items-center">
          Proceed to Select Shop
          <svg className="w-4 h-4 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </div>
    </div>
  );
};

export default App;